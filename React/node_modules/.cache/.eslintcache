[{"/Users/thimovandermeer/Desktop/Codam projecten/ft_transcendence/our_ft_transcendence/React/src/index.tsx":"1","/Users/thimovandermeer/Desktop/Codam projecten/ft_transcendence/our_ft_transcendence/React/src/reportWebVitals.ts":"2","/Users/thimovandermeer/Desktop/Codam projecten/ft_transcendence/our_ft_transcendence/React/src/App.tsx":"3","/Users/thimovandermeer/Desktop/Codam projecten/ft_transcendence/our_ft_transcendence/React/src/components/users/Register.tsx":"4","/Users/thimovandermeer/Desktop/Codam projecten/ft_transcendence/our_ft_transcendence/React/src/components/users/Login.tsx":"5","/Users/thimovandermeer/Desktop/Codam projecten/ft_transcendence/our_ft_transcendence/React/src/components/message/messagelandingpage.tsx":"6","/Users/thimovandermeer/Desktop/Codam projecten/ft_transcendence/our_ft_transcendence/React/src/components/message/message.tsx":"7"},{"size":579,"mtime":1624372097475,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1624372057030,"results":"10","hashOfConfig":"9"},{"size":861,"mtime":1624372097473,"results":"11","hashOfConfig":"9"},{"size":2640,"mtime":1624372057029,"results":"12","hashOfConfig":"9"},{"size":926,"mtime":1624372057029,"results":"13","hashOfConfig":"9"},{"size":5691,"mtime":1624372097474,"results":"14","hashOfConfig":"9"},{"size":748,"mtime":1624372097474,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"1l4ekf",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"/Users/thimovandermeer/Desktop/Codam projecten/ft_transcendence/our_ft_transcendence/React/src/index.tsx",["33"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Popper from 'popper.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/thimovandermeer/Desktop/Codam projecten/ft_transcendence/our_ft_transcendence/React/src/reportWebVitals.ts",[],"/Users/thimovandermeer/Desktop/Codam projecten/ft_transcendence/our_ft_transcendence/React/src/App.tsx",[],"/Users/thimovandermeer/Desktop/Codam projecten/ft_transcendence/our_ft_transcendence/React/src/components/users/Register.tsx",[],"/Users/thimovandermeer/Desktop/Codam projecten/ft_transcendence/our_ft_transcendence/React/src/components/users/Login.tsx",[],"/Users/thimovandermeer/Desktop/Codam projecten/ft_transcendence/our_ft_transcendence/React/src/components/message/messagelandingpage.tsx",["34","35","36","37"],"import React, { Component } from \"react\";\nimport classes from \"./stylesheets/Channel.module.css\";\nimport './stylesheets/messagelandingpage.css';\nimport {Link, Route} from \"react-router-dom\";\nimport {useHistory} from 'react-router-dom';\nimport Message from \"./message\";\n\nclass MessageLandingPage extends Component{\n    constructor(props : any){ // change later{\n    super(props);\n    this.state = false;\n    }\n    DummyData = [\n        {\n            channelID: 1,\n            Name: \"Epic first channel\",\n            admin: \"thimo\", // this is going to become a UserID in the future\n            participants: [\"Thimo\", \"Roy\", \"Gijs\", \"Qing\"],\n        },\n        {\n            channelID: 2,\n            Name: \"Epic second chat\",\n            admin: \"Gijs\", // this is going to become a UserID in the future\n            participants: [\"Thimo\", \"Roy\", \"Gijs\", \"Qing\"],\n        },\n        {\n            channelID: 3,\n            Name: \"Epic third chat\",\n            admin: \"Gijs\", // this is going to become a UserID in the future\n            participants: [\"Thimo\", \"Roy\", \"Gijs\", \"Qing\"],\n        },\n        {\n            channelID: 4,\n            Name: \"Epic fourth chat\",\n            admin: \"Gijs\", // this is going to become a UserID in the future\n            participants: [\"Thimo\", \"Roy\", \"Gijs\", \"Qing\"],\n        },\n        {\n            channelID: 5,\n            Name: \"Epic fifth chat\",\n            admin: \"Gijs\", // this is going to become a UserID in the future\n            participants: [\"Thimo\", \"Roy\", \"Gijs\", \"Qing\"],\n        },\n        {\n            channelID: 6,\n            Name: \"Zieke chat ouwe\",\n            admin: \"Gijs\", // this is going to become a UserID in the future\n            participants: [\"Thimo\", \"Roy\", \"Gijs\", \"Qing\"],\n        }\n    ]\n\n    DummyDirectMessage = [\n        {\n            channelID: 1,\n            Name: \"Epic first channel\",\n            admin: \"thimo\", // this is going to become a UserID in the future\n            participants: [\"Thimo\", \"Roy\", \"Gijs\", \"Qing\"],\n        },\n        {\n            channelID: 2,\n            Name: \"Epic second chat\",\n            admin: \"Gijs\", // this is going to become a UserID in the future\n            participants: [\"Thimo\", \"Roy\", \"Gijs\", \"Qing\"],\n        },\n        {\n            channelID: 3,\n            Name: \"Epic third chat\",\n            admin: \"Gijs\", // this is going to become a UserID in the future\n            participants: [\"Thimo\", \"Roy\", \"Gijs\", \"Qing\"],\n        },\n        {\n            channelID: 4,\n            Name: \"Epic fourth chat\",\n            admin: \"Gijs\", // this is going to become a UserID in the future\n            participants: [\"Thimo\", \"Roy\", \"Gijs\", \"Qing\"],\n        },\n        {\n            channelID: 5,\n            Name: \"Epic fifth chat\",\n            admin: \"Gijs\", // this is going to become a UserID in the future\n            participants: [\"Thimo\", \"Roy\", \"Gijs\", \"Qing\"],\n        },\n        {\n            channelID: 6,\n            Name: \"Zieke chat ouwe\",\n            admin: \"Gijs\", // this is going to become a UserID in the future\n            participants: [\"Thimo\", \"Roy\", \"Gijs\", \"Qing\"],\n        }\n    ]\n\n    renderChannels(){\n        return (\n            <ul className=\"list-group lijst\">\n                <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n                    {this.DummyData.map(item=>(\n                        <div onClick={(e) => GoToMessage(item.channelID, e)} className=\"list-group-item d-flex justify-content-between align-items-center\">\n                        <ul>\n                            <li key={2}>{item.Name}</li>\n                            <span className=\"badge badge-primary badge-pill\">2</span>\n                        </ul>\n                        </div>\n                    ))}\n                </li>\n            </ul>\n        );\n    }\n\n    renderDirectMessage(){\n        return (\n            <ul className=\"list-group lijst\">\n                <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n                    {this.DummyDirectMessage.map(item=>(\n                        <div onClick={(e) => GoToMessage(item.channelID, e)} className=\"list-group-item d-flex justify-content-between align-items-center\">\n                            <ul className={classes.directMessage}>\n                                {item.participants.map(participants=>(\n                                    <div>\n                                    <li key={2}>{participants},</li>\n                                    </div>))}\n                            </ul>\n                        </div>\n                    ))}\n                </li>\n            </ul>\n        );\n    };\n\n    render()\n    {\n\t\treturn (\n\t\t    <main>\n\t\t\t<div className=\"d-flex flex-column flex-shrink-0 p-3 text-white bg-dark\">\n              <a href=\"http://localhost:8080/\" className=\"d-flex align-items-center mb-3 mb-md-0 me-md-auto text-white text-decoration-none\">\n                <svg className=\"bi me-2\" width=\"40\" height=\"32\"></svg>\n                <span className=\"fs-4\">Message options</span>\n              </a>\n                <ul className=\"nav nav-pills flex-column mb-auto\">\n                  <li className=\"nav-item\">\n                    <h1> Channels</h1>\n                      <div>\n                          {this.renderChannels()}\n                      </div>\n                  </li>\n                  <li>\n                    <h1> Direct messages</h1>\n                        <div>\n                            {this.renderDirectMessage()}\n                        </div>\n                  </li>\n                </ul>\n            </div>\n            </main>\n\t\t)\n\t}\n\n}\n\n\nexport default MessageLandingPage\n","/Users/thimovandermeer/Desktop/Codam projecten/ft_transcendence/our_ft_transcendence/React/src/components/message/message.tsx",["38"],"import {Component} from \"react\";\n\nfunction message(props: number)\n{\n\n}\nclass Message extends Component{\n    constructor(props : number)\n    {\n        super(props);\n        this.handleMessage = this.handleMessage.bind(this);\n        this.setState({isLoggedIn: false});\n    }\n\n    handleMessage() {\n        this.setState({isLoggedIn: true});\n    }\n\n    dummyRender()\n    {\n        return <div> test data</div>;\n    };\n    // channel id should be passed as a parameter\n    render()\n    {\n        // @ts-ignore\n        const isActive = this.state.isLoggedIn;\n        let chatToRender;\n        if (isActive)\n            chatToRender = this.dummyRender();\n        return (<div>\n            {chatToRender};\n        </div>);\n    }\n}\n\nexport default Message",{"ruleId":"39","severity":1,"message":"40","line":7,"column":8,"nodeType":"41","messageId":"42","endLine":7,"endColumn":14},{"ruleId":"39","severity":1,"message":"43","line":4,"column":9,"nodeType":"41","messageId":"42","endLine":4,"endColumn":13},{"ruleId":"39","severity":1,"message":"44","line":4,"column":15,"nodeType":"41","messageId":"42","endLine":4,"endColumn":20},{"ruleId":"39","severity":1,"message":"45","line":5,"column":9,"nodeType":"41","messageId":"42","endLine":5,"endColumn":19},{"ruleId":"39","severity":1,"message":"46","line":6,"column":8,"nodeType":"41","messageId":"42","endLine":6,"endColumn":15},{"ruleId":"39","severity":1,"message":"47","line":3,"column":10,"nodeType":"41","messageId":"42","endLine":3,"endColumn":17},"@typescript-eslint/no-unused-vars","'Popper' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Route' is defined but never used.","'useHistory' is defined but never used.","'Message' is defined but never used.","'message' is defined but never used."]